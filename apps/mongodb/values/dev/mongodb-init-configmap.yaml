apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
  namespace: mongodb-dev
data:
  init-replica.js: |
    // Script mejorado para inicializar el replica set
    // Enfoque conservador: preservar configuraciones existentes cuando sea posible
    
    // Verificar el estado actual del replica set
    print("Verificando el estado actual del replica set...");
    var rsStatus;
    var maxRecoveryAttempts = 10;  // Intentos de auto-recuperaci√≥n
    var recoveryAttempt = 0;
    var recovered = false;
    
    // Bucle de espera para permitir la auto-recuperaci√≥n del replica set
    while (recoveryAttempt < maxRecoveryAttempts && !recovered) {
      try {
        rsStatus = rs.status();
        print("Intento " + (recoveryAttempt + 1) + ": Estado del replica set: " + JSON.stringify(rsStatus));
        
        // Si el estado es OK, el replica set se ha recuperado
        if (rsStatus.ok === 1) {
          print("‚úÖ Replica set en buen estado, no es necesario intervenir");
          recovered = true;
          break;
        } else {
          print("‚è≥ El replica set a√∫n no est√° listo. Esperando para auto-recuperaci√≥n...");
          sleep(5000);  // Esperar 5 segundos entre intentos
        }
      } catch (err) {
        print("Intento " + (recoveryAttempt + 1) + ": Error al verificar el estado: " + err);
        
        // Si el error es que el replica set no est√° iniciado (94) o configuraci√≥n inv√°lida (93)
        if (err.code === 94 || err.code === 93) {
          print("‚è≥ Replica set no iniciado o con config inv√°lida. Esperando para auto-recuperaci√≥n...");
        } else {
          print("‚ö†Ô∏è Error inesperado durante la verificaci√≥n: " + err);
        }
        
        sleep(5000);  // Esperar 5 segundos entre intentos
      }
      recoveryAttempt++;
    }
    
    // Si el replica set se recuper√≥ por s√≠ solo, no necesitamos hacer nada m√°s
    if (recovered) {
      print("üéâ Replica set recuperado autom√°ticamente. No se requiere intervenci√≥n.");
      
      // Imprimir miembros del replica set para confirmar
      try {
        var config = rs.conf();
        print("Configuraci√≥n actual del replica set:");
        printjson(config);
      } catch (e) {
        print("No se pudo obtener la configuraci√≥n: " + e);
      }
      
      // Salir con √©xito
      quit(0);
    }
    
    // Si llegamos aqu√≠, necesitamos intervenir
    print("‚ö†Ô∏è El replica set no se recuper√≥ autom√°ticamente despu√©s de " + maxRecoveryAttempts + " intentos.");
    print("Procediendo con intervenci√≥n manual...");
    
    // Inicializar el replica set solo si es necesario
    try {
      print("Revisando si existe alguna configuraci√≥n previa...");
      
      // Intentar obtener la configuraci√≥n actual
      var currentConfig = null;
      try {
        currentConfig = rs.conf();
        print("Configuraci√≥n actual encontrada:");
        printjson(currentConfig);
      } catch (e) {
        print("No se encontr√≥ configuraci√≥n previa: " + e);
      }
      
      if (currentConfig && currentConfig._id) {
        print("Intentando reconfigurar el replica set existente...");
        
        // Utilizar la misma configuraci√≥n pero actualizar los hosts si es necesario
        var newConfig = {
          _id: currentConfig._id,
          version: currentConfig.version + 1,
          members: [
            { _id: 0, host: "mongodb-0.mongodb:27017", priority: 1 },
            { _id: 1, host: "mongodb-1.mongodb:27017", priority: 1 },
            { _id: 2, host: "mongodb-2.mongodb:27017", priority: 1 }
          ]
        };
        
        try {
          // Usar replSetReconfig para mantener el mismo ID pero actualizar los hosts
          var reconfigResult = db.adminCommand({ replSetReconfig: newConfig, force: true });
          print("Resultado de reconfiguraci√≥n: " + JSON.stringify(reconfigResult));
        } catch (reconfigErr) {
          print("Error durante la reconfiguraci√≥n: " + reconfigErr);
          print("Continuando con inicializaci√≥n completa...");
        }
      } else {
        // Solo iniciar un nuevo replica set si definitivamente no hay configuraci√≥n previa
        print("No hay configuraci√≥n previa. Iniciando nuevo replica set...");
        var initConfig = {
          _id: "rs0",
          members: [
            { _id: 0, host: "mongodb-0.mongodb:27017", priority: 1 },
            { _id: 1, host: "mongodb-1.mongodb:27017", priority: 1 },
            { _id: 2, host: "mongodb-2.mongodb:27017", priority: 1 }
          ]
        };
        
        var initResult = rs.initiate(initConfig);
        print("Resultado de inicializaci√≥n: " + JSON.stringify(initResult));
      }
    } catch (err) {
      print("Error durante la manipulaci√≥n del replica set: " + err);
      
      // Si ya est√° inicializado, intentar reconfigurar con fuerza
      if (err.codeName === "AlreadyInitialized") {
        print("Replica set ya inicializado. Intentando reconfiguraci√≥n forzada...");
        try {
          var forceConfig = {
            _id: "rs0",  // Podr√≠amos obtener el ID actual si est√° disponible
            version: 1,
            members: [
              { _id: 0, host: "mongodb-0.mongodb:27017", priority: 1 },
              { _id: 1, host: "mongodb-1.mongodb:27017", priority: 1 },
              { _id: 2, host: "mongodb-2.mongodb:27017", priority: 1 }
            ]
          };
          
          var forceResult = db.adminCommand({ replSetReconfig: forceConfig, force: true });
          print("Resultado de reconfiguraci√≥n forzada: " + JSON.stringify(forceResult));
        } catch (forceErr) {
          print("Error durante la reconfiguraci√≥n forzada: " + forceErr);
          quit(1);
        }
      } else {
        print("Error fatal durante la manipulaci√≥n del replica set: " + err);
        quit(1);
      }
    }
    
    // Esperar para que los cambios se apliquen
    print("Esperando 10 segundos para que se apliquen los cambios...");
    sleep(10000);
    
    // Verificar el estado final
    var finalAttempts = 5;
    for (var i = 0; i < finalAttempts; i++) {
      try {
        var finalStatus = rs.status();
        print("Verificaci√≥n final " + (i + 1) + ": Estado del replica set: " + JSON.stringify(finalStatus));
        
        if (finalStatus.ok === 1) {
          print("‚úÖ Replica set inicializado correctamente");
          
          // Imprimir miembros para confirmar
          try {
            var members = "";
            finalStatus.members.forEach(function(member) {
              members += "\n  - " + member.name + " (estado: " + member.stateStr + ")";
            });
            print("Miembros del replica set:" + members);
          } catch (e) {
            print("No se pudieron listar los miembros: " + e);
          }
          
          quit(0);
        } else {
          print("‚ö†Ô∏è El replica set a√∫n no est√° totalmente operativo. Esperando...");
          sleep(5000);
        }
      } catch (finalErr) {
        print("Error al verificar el estado final: " + finalErr);
        sleep(5000);
      }
    }
    
    print("‚ö†Ô∏è No se pudo confirmar que el replica set est√© completamente operativo.");
    print("Puede requerir intervenci√≥n manual adicional o m√°s tiempo para estabilizarse.");
    
    // A√∫n as√≠ intentamos continuar, ya que a veces toma m√°s tiempo para que todos los nodos se sincronicen
    print("Script de inicializaci√≥n completado, continuando con el proceso...");
