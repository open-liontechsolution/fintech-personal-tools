apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
  namespace: mongodb-dev
data:
  init-replica.js: |
    // Script optimizado para alta disponibilidad en entornos Kubernetes
    // Diseñado para mantener la consistencia a pesar de reinicios de pods
    
    print("Verificando el estado actual del cluster MongoDB...");
    
    // Función para esperar hasta 30 segundos a que todos los nodos estén disponibles
    function waitForAllNodes() {
      var maxWaitTime = 30; // segundos
      var waited = 0;
      var allAvailable = false;
      
      print("Esperando a que todos los miembros del cluster estén disponibles...");
      
      while (!allAvailable && waited < maxWaitTime) {
        try {
          var hosts = [
            "mongodb-0.mongodb:27017",
            "mongodb-1.mongodb:27017",
            "mongodb-2.mongodb:27017"
          ];
          
          var allResponding = true;
          hosts.forEach(function(host) {
            try {
              var conn = new Mongo("mongodb://" + host);
              var adminDb = conn.getDB("admin");
              var ping = adminDb.runCommand({ ping: 1 });
              if (ping.ok !== 1) {
                allResponding = false;
                print("⚠️ El nodo " + host + " no responde correctamente");
              } else {
                print("✅ El nodo " + host + " está respondiendo");
              }
            } catch (nodeErr) {
              allResponding = false;
              print("⚠️ No se puede conectar a " + host + ": " + nodeErr);
            }
          });
          
          if (allResponding) {
            allAvailable = true;
            print("✅ Todos los nodos están disponibles");
          } else {
            print("⏳ Esperando a que todos los nodos estén disponibles...");
            sleep(2000);
            waited += 2;
          }
        } catch (e) {
          print("Error al verificar nodos: " + e);
          sleep(2000);
          waited += 2;
        }
      }
      
      return allAvailable;
    }
    
    // Función para obtener hostname del nodo actual
    function getHostname() {
      var hostname = "";
      try {
        // Intentar obtener el hostname usando command
        var result = db.runCommand({ hostInfo: 1 });
        if (result.ok === 1) {
          hostname = result.system.hostname;
        }
      } catch (e) {
        print("Error al obtener hostname: " + e);
      }
      return hostname;
    }
    
    // Función para determinar si este es el nodo maestro original
    function isPrimaryCandidate() {
      var hostname = getHostname();
      // mongodb-0 siempre se considera el candidato principal
      return hostname.includes("mongodb-0");
    }
    
    // Verificar si el replica set está funcionando correctamente
    var isMaster = null;
    var needsConfiguration = false;
    var currentConfig = null;
    
    try {
      isMaster = db.adminCommand({ isMaster: 1 });
      print("Estado de isMaster del nodo: " + JSON.stringify(isMaster));
      
      if (isMaster.setName && isMaster.setName === "rs0") {
        print("✅ Este nodo pertenece al replica set 'rs0'");
        
        try {
          var rsStatus = rs.status();
          if (rsStatus.ok === 1) {
            print("✅ Replica set está funcionando correctamente");
            print("Miembros del replica set:");
            rsStatus.members.forEach(function(member) {
              print(" - " + member.name + " (estado: " + member.stateStr + ")");
            });
            
            // Verificar si la configuración está completa
            try {
              currentConfig = rs.conf();
              
              // Verificar que todos los nodos están en la configuración
              var expectedHosts = [
                "mongodb-0.mongodb:27017",
                "mongodb-1.mongodb:27017",
                "mongodb-2.mongodb:27017"
              ];
              
              var configuredHosts = [];
              currentConfig.members.forEach(function(member) {
                configuredHosts.push(member.host);
              });
              
              var missingHosts = expectedHosts.filter(function(host) {
                return configuredHosts.indexOf(host) === -1;
              });
              
              if (missingHosts.length > 0) {
                print("⚠️ Faltan nodos en la configuración: " + missingHosts.join(", "));
                needsConfiguration = true;
              } else {
                print("✅ Todos los nodos esperados están en la configuración");
                
                // Verificar si hay nodos adicionales inesperados
                var unexpectedHosts = configuredHosts.filter(function(host) {
                  return expectedHosts.indexOf(host) === -1;
                });
                
                if (unexpectedHosts.length > 0) {
                  print("⚠️ Hay nodos inesperados en la configuración: " + unexpectedHosts.join(", "));
                  needsConfiguration = true;
                }
              }
            } catch (confErr) {
              print("⚠️ Error al obtener configuración: " + confErr);
              needsConfiguration = true;
            }
          } else {
            print("⚠️ Replica set en estado inválido: " + JSON.stringify(rsStatus));
            needsConfiguration = true;
          }
        } catch (statusErr) {
          print("⚠️ Error al verificar estado del replica set: " + statusErr);
          needsConfiguration = true;
        }
      } else {
        print("⚠️ Este nodo no pertenece al replica set 'rs0'");
        needsConfiguration = true;
      }
    } catch (e) {
      print("⚠️ Error al verificar isMaster: " + e);
      needsConfiguration = true;
    }
    
    // Si no necesita configuración, simplemente salimos
    if (!needsConfiguration) {
      print("✅ El replica set está configurado correctamente");
      quit(0);
    }
    
    // Si necesita configuración, sólo el candidato principal (mongodb-0) debe configurarlo
    if (!isPrimaryCandidate()) {
      print("⏳ Este nodo no es el candidato principal (mongodb-0)");
      print("⏳ Esperando a que el nodo principal configure el replica set...");
      quit(0);
    }
    
    // Aquí sólo continúa mongodb-0
    print("Este nodo es el candidato principal. Intentando configurar el replica set...");
    
    // Esperar a que todos los nodos estén disponibles antes de configurar
    var allNodesAvailable = waitForAllNodes();
    if (!allNodesAvailable) {
      print("⚠️ No todos los nodos están disponibles después de esperar");
      print("⚠️ Continuando de todos modos, pero es posible que el replica set no se configure correctamente");
    }
    
    // Configurar el replica set
    try {
      print("Iniciando configuración del replica set...");
      
      // Si ya hay una configuración, intentar actualizarla
      if (currentConfig && currentConfig._id) {
        print("Actualizando configuración existente...");
        
        // Crear una nueva configuración basada en la actual
        var newMembers = [
          { _id: 0, host: "mongodb-0.mongodb:27017", priority: 2 },
          { _id: 1, host: "mongodb-1.mongodb:27017", priority: 1 },
          { _id: 2, host: "mongodb-2.mongodb:27017", priority: 1 }
        ];
        
        var newConfig = {
          _id: currentConfig._id,
          version: currentConfig.version + 1,
          members: newMembers
        };
        
        // Si hay un problema con la configuración, intentar actualizar con fuerza
        try {
          print("Aplicando nueva configuración...");
          var reconfigResult = rs.reconfig(newConfig, { force: true });
          print("Resultado de reconfiguración: " + JSON.stringify(reconfigResult));
        } catch (reconfigErr) {
          print("Error en reconfiguración: " + reconfigErr);
          
          // Intentar con replSetReconfig directamente si rs.reconfig falla
          try {
            print("Intentando con replSetReconfig...");
            var forceResult = db.adminCommand({ replSetReconfig: newConfig, force: true });
            print("Resultado de replSetReconfig: " + JSON.stringify(forceResult));
          } catch (forceErr) {
            print("Error en replSetReconfig: " + forceErr);
            print("No se pudo reconfigurar el replica set");
          }
        }
      } else {
        // Si no hay configuración previa, iniciar una nueva
        print("Iniciando una nueva configuración del replica set...");
        
        var initConfig = {
          _id: "rs0",
          members: [
            { _id: 0, host: "mongodb-0.mongodb:27017", priority: 2 },
            { _id: 1, host: "mongodb-1.mongodb:27017", priority: 1 },
            { _id: 2, host: "mongodb-2.mongodb:27017", priority: 1 }
          ]
        };
        
        var initResult = rs.initiate(initConfig);
        print("Resultado de inicialización: " + JSON.stringify(initResult));
      }
      
      // Esperar a que la configuración se aplique
      print("Esperando a que la configuración se aplique...");
      sleep(5000);
      
      // Verificar el estado final
      try {
        var finalStatus = rs.status();
        print("Estado final del replica set: " + JSON.stringify(finalStatus));
        
        if (finalStatus.ok === 1) {
          print("✅ Replica set configurado correctamente");
          
          // Imprimir estado de los miembros
          finalStatus.members.forEach(function(member) {
            print(" - " + member.name + ": " + member.stateStr);
          });
          
          quit(0);
        } else {
          print("⚠️ El replica set aún tiene problemas después de la configuración");
        }
      } catch (finalErr) {
        print("Error al verificar estado final: " + finalErr);
      }
    } catch (setupErr) {
      print("Error durante la configuración: " + setupErr);
    }
    
    print("Proceso de configuración completado. El cluster puede requerir más tiempo para estabilizarse.");
  startup-script.sh: |
    #!/bin/bash
    set -e
    
    echo "Ejecutando script de auto-recuperación para MongoDB ReplicaSet..."
    
    # Función para detectar si hay archivos corruptos
    check_corruption() {
      local corrupted=0
      
      # Verificar si existen archivos lock que puedan estar causando problemas
      if [ -f /data/db/mongod.lock ]; then
        echo "⚠️ Encontrado archivo de bloqueo mongod.lock - posible cierre incorrecto"
        corrupted=1
      fi
      
      # Verificar si local.0 y local.ns existen pero están en estado inconsistente
      if [ -f /data/db/local.0 ] && [ -f /data/db/local.ns ]; then
        echo "Verificando integridad de archivos de ReplicaSet..."
        
        # Si el tamaño es 0 o muy pequeño para archivos críticos, podría indicar corrupción
        if [ "$(stat -c%s /data/db/local.0)" -lt 1024 ] || [ "$(stat -c%s /data/db/local.ns)" -lt 1024 ]; then
          echo "⚠️ Archivos de base de datos local posiblemente corruptos (tamaño anormal)"
          corrupted=1
        fi
      fi
      
      # Buscar archivos journal incompletos
      if find /data/db/journal -name "*.incomplete" 2>/dev/null | grep -q .; then
        echo "⚠️ Encontrados archivos journal incompletos"
        corrupted=1
      fi
      
      return $corrupted
    }
    
    # Función para limpiar archivos corruptos
    clean_corruption() {
      echo "🧹 Limpiando archivos de configuración corruptos del ReplicaSet..."
      
      # Eliminar archivos de configuración locales que afectan al replicaset
      rm -f /data/db/mongod.lock /data/db/WiredTiger.lock 2>/dev/null || true
      
      # Si la corrupción es seria, eliminar archivos de replica set
      # Esto es drástico pero efectivo para casos recurrentes
      hostname=$(hostname)
      if [[ "$hostname" == *"mongodb-0"* ]]; then
        echo "Este es el nodo primario (mongodb-0). Eliminando archivos de ReplicaSet para reinicialización limpia..."
        rm -f /data/db/local.0 /data/db/local.ns /data/db/replset* 2>/dev/null || true
      fi
      
      echo "Limpieza completada. MongoDB iniciará con configuración limpia."
    }
    
    # Comprobar si hay corrupción y limpiar si es necesario
    if check_corruption; then
      echo "📛 Detectada posible corrupción en archivos de MongoDB."
      clean_corruption
    else
      echo "✅ No se detectaron problemas con los archivos de configuración."
    fi
    
    echo "Continuando con el inicio normal de MongoDB..."
