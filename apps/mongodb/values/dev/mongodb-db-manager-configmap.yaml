apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-db-manager
  namespace: mongodb-dev
data:
  user-management.js: |
    // Archivo JS para gestionar usuarios y bases de datos en MongoDB
    
    // Esperar a que el replica set esté estable (se ejecuta como primario)
    var maxAttempts = 30;
    var attempt = 0;
    var isReplicaSetReady = false;
    
    while (attempt < maxAttempts && !isReplicaSetReady) {
      try {
        var status = rs.status();
        if (status.ok && status.members.some(m => m.state === 1)) {
          isReplicaSetReady = true;
          print("Replica set está listo como primario");
        } else {
          print("Esperando a que el replica set esté listo...");
          sleep(2000);
        }
      } catch (err) {
        print("Error al verificar el estado del replica set: " + err);
        sleep(2000);
      }
      attempt++;
    }
    
    if (!isReplicaSetReady) {
      print("ERROR: No se pudo conectar al replica set después de varios intentos");
      quit(1);
    }
    
    // Las variables de entorno no están disponibles directamente en el shell de MongoDB
    // Esta variable MONGODB_DATABASES debe ser definida como variable global
    // Alternativamente, podemos cargar los datos desde un archivo usando load()
    var databases = [];
    
    // Intentar cargar la configuración desde un archivo
    try {
      load("/tmp/mongodb-databases.js");
      print("Bases de datos a procesar: " + JSON.stringify(databases));
    } catch (err) {
      print("Error al cargar el archivo de configuración: " + err);
      print("ADVERTENCIA: No hay bases de datos para procesar.");
      quit(1);
    }
    
    var usersCreated = 0;
    
    databases.forEach(function(db) {
      print("Procesando base de datos: " + db.name);
      
      try {
        // Conectar a la base de datos (MongoDB la creará automáticamente si no existe)
        var database = db.getSiblingDB(db.name);
        
        // Crear un documento dummy para asegurar que la base de datos se persista
        database.dummy.insertOne({ _id: "init", createdAt: new Date() });
        database.dummy.deleteOne({ _id: "init" });
        
        print("Base de datos " + db.name + " verificada/creada");
        
        // Crear usuario si se proporcionan credenciales
        if (db.username && db.password) {
          try {
            // Verificar si el usuario ya existe
            var userExists = false;
            try {
              userExists = database.getUser(db.username) !== null;
            } catch (e) {
              print("Error al verificar usuario existente: " + e);
            }
            
            if (!userExists) {
              database.createUser({
                user: db.username,
                pwd: db.password,
                roles: db.roles || [{ role: "readWrite", db: db.name }]
              });
              print("Usuario " + db.username + " creado para la base de datos " + db.name);
              usersCreated++;
            } else {
              print("El usuario " + db.username + " ya existe en " + db.name);
              
              // Actualizar contraseña si se solicita
              if (db.updatePassword === true) {
                database.changeUserPassword(db.username, db.password);
                print("Contraseña actualizada para " + db.username);
              }
            }
          } catch (err) {
            print("Error al gestionar el usuario " + db.username + ": " + err);
          }
        }
      } catch (err) {
        print("Error al procesar la base de datos " + db.name + ": " + err);
      }
    });
    
    print("Finalizado. Se crearon/actualizaron " + usersCreated + " usuarios");
    
  mongodb-user-manager.sh: |
    #!/bin/bash
    # Script para gestionar usuarios de MongoDB
    
    echo "Iniciando el procesamiento de usuarios para MongoDB..."
    
    # Esperar a que MongoDB esté disponible
    echo "Esperando a que MongoDB esté disponible..."
    until mongo --host mongodb-0.mongodb --eval "db.adminCommand('ping')" --quiet; do
      echo "MongoDB no está disponible aún. Esperando 5 segundos..."
      sleep 5
    done
    
    # Inicializar array de bases de datos
    DATABASES="[]"
    
    # Debug: Mostrar contenido del directorio de secretos
    echo "Contenido del directorio /secrets:"
    ls -la /secrets/
    
    # En volúmenes proyectados, los secretos se montan directamente
    if [ -f "/secrets/database" ] && [ -f "/secrets/username" ] && [ -f "/secrets/password" ]; then
      DB_NAME=$(cat "/secrets/database")
      DB_USER=$(cat "/secrets/username")
      DB_PASS=$(cat "/secrets/password")
      
      echo "Encontrada información para la base de datos: $DB_NAME"
      
      # Crear un archivo temporal con la configuración de las bases de datos
      # Este enfoque evita problemas de escape de comillas al pasar JSON como argumento
      echo "// Archivo temporal generado automáticamente
var databases = [
  {
    name: '$DB_NAME',
    username: '$DB_USER',
    password: '$DB_PASS',
    roles: [{ role: 'readWrite', db: '$DB_NAME' }]
  }
];" > /tmp/mongodb-databases.js
      
      # Para debug
      echo "Contenido del archivo de configuración:"
      cat /tmp/mongodb-databases.js
      
    else
      echo "No se encontraron los archivos esperados en /secrets/"
      echo "Archivos presentes:"
      find /secrets -type f | sort
      
      # Crear un archivo vacío para evitar errores
      echo "// Archivo temporal generado automáticamente
var databases = [];" > /tmp/mongodb-databases.js
    fi
    
    # Verificar si MongoDB está configurado con autenticación
    echo "Verificando configuración de seguridad de MongoDB..."
    AUTH_ENABLED=$(mongo --host mongodb-0.mongodb --eval "try { db.serverCmdLineOpts().parsed.security.authorization || 'disabled' } catch(e) { 'unknown' }" --quiet)
    
    echo "Estado de la autenticación en MongoDB: $AUTH_ENABLED"
    
    # Verificar si el usuario admin ya existe
    echo "Verificando si existe el usuario admin..."
    ADMIN_EXISTS=$(mongo --host mongodb-0.mongodb --eval "try { db = db.getSiblingDB('admin'); db.system.users.find({user:'admin'}).count() > 0 } catch(e) { false }" --quiet)
    
    echo "¿Existe el usuario admin?: $ADMIN_EXISTS"
    
    # Definir comando de MongoDB basado en la configuración
    if [ "$AUTH_ENABLED" == "enabled" ]; then
      echo "MongoDB tiene autenticación habilitada, intentando autenticar..."
      
      # Intentar autenticar con diferentes variantes
      mongo --host mongodb-0.mongodb -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval "printjson(db.adminCommand('ping'))" --quiet
      
      if [ $? -eq 0 ]; then
        echo " Autenticación exitosa con credenciales de secret"
        # Usar el archivo temporal para evitar problemas de escape
        MONGO_CMD="mongo --host mongodb-0.mongodb -u \"$MONGO_INITDB_ROOT_USERNAME\" -p \"$MONGO_INITDB_ROOT_PASSWORD\" --authenticationDatabase admin /scripts/user-management.js"
      else
        echo " Autenticación fallida. No se puede continuar cuando la autenticación está habilitada pero las credenciales no funcionan."
        echo "Por favor verifica que las credenciales en el secret mongodb-secret son correctas."
        exit 1
      fi
    else
      echo " MongoDB está ejecutándose sin autenticación habilitada, continuando sin credenciales."
      echo "Es altamente recomendable habilitar la autenticación en entornos de producción."
      
      # Si MongoDB no tiene autenticación, creamos el usuario admin si no existe
      if [ "$ADMIN_EXISTS" == "false" ]; then
        echo "Creando usuario admin ya que no existe..."
        mongo --host mongodb-0.mongodb admin --eval "db.createUser({user: '$MONGO_INITDB_ROOT_USERNAME', pwd: '$MONGO_INITDB_ROOT_PASSWORD', roles: ['root']})"
        
        if [ $? -eq 0 ]; then
          echo " Usuario admin creado exitosamente"
        else
          echo " No se pudo crear el usuario admin"
        fi
      fi
      
      # Usar MongoDB sin autenticación
      MONGO_CMD="mongo --host mongodb-0.mongodb /scripts/user-management.js"
    fi
    
    # Ejecutar el script de gestión de usuarios
    echo "Ejecutando script de gestión de usuarios..."
    echo "Comando a ejecutar: $MONGO_CMD"
    eval "$MONGO_CMD"
    
    # Limpiar el archivo temporal
    rm -f /tmp/mongodb-databases.js
    
    if [ $? -eq 0 ]; then
      echo " Procesamiento de usuarios completado con éxito."
    else
      echo " El script de gestión de usuarios falló con código $?"
      exit 1
    fi
