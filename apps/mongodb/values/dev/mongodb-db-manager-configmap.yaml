apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-db-manager
  namespace: mongodb-dev
data:
  user-management.js: |
    // Archivo JS para gestionar usuarios y bases de datos en MongoDB
    
    // Esperar a que el replica set esté estable (se ejecuta como primario)
    var maxAttempts = 30;
    var attempt = 0;
    var isReplicaSetReady = false;
    
    while (attempt < maxAttempts && !isReplicaSetReady) {
      try {
        var status = rs.status();
        if (status.ok && status.members.some(m => m.state === 1)) {
          isReplicaSetReady = true;
          print("Replica set está listo como primario");
        } else {
          print("Esperando a que el replica set esté listo...");
          sleep(2000);
        }
      } catch (err) {
        print("Error al verificar el estado del replica set: " + err);
        sleep(2000);
      }
      attempt++;
    }
    
    if (!isReplicaSetReady) {
      print("ERROR: No se pudo conectar al replica set después de varios intentos");
      quit(1);
    }
    
    // Procesar los secretos que definen usuarios y bases de datos
    var databases = JSON.parse(process.env.MONGODB_DATABASES || "[]");
    var usersCreated = 0;
    
    databases.forEach(function(db) {
      print("Procesando base de datos: " + db.name);
      
      try {
        // Conectar a la base de datos (MongoDB la creará automáticamente si no existe)
        var database = db.getSiblingDB(db.name);
        
        // Crear un documento dummy para asegurar que la base de datos se persista
        database.dummy.insertOne({ _id: "init", createdAt: new Date() });
        database.dummy.deleteOne({ _id: "init" });
        
        print("Base de datos " + db.name + " verificada/creada");
        
        // Crear usuario si se proporcionan credenciales
        if (db.username && db.password) {
          try {
            // Verificar si el usuario ya existe
            var userExists = database.getUser(db.username);
            
            if (!userExists) {
              database.createUser({
                user: db.username,
                pwd: db.password,
                roles: db.roles || [{ role: "readWrite", db: db.name }]
              });
              print("Usuario " + db.username + " creado para la base de datos " + db.name);
              usersCreated++;
            } else {
              print("El usuario " + db.username + " ya existe en " + db.name);
              
              // Actualizar contraseña si se solicita
              if (db.updatePassword === true) {
                database.changeUserPassword(db.username, db.password);
                print("Contraseña actualizada para " + db.username);
              }
            }
          } catch (err) {
            print("Error al gestionar el usuario " + db.username + ": " + err);
          }
        }
      } catch (err) {
        print("Error al procesar la base de datos " + db.name + ": " + err);
      }
    });
    
    print("Finalizado. Se crearon/actualizaron " + usersCreated + " usuarios");
